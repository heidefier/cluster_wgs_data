###R function to implement the clustering algorithm### 
#pos(numeric) is a vector containing the variant positions of the respective region sorted in an increasing order
#names(character) is a vector with the corresponding variant names
#window-size(numeric) and overlap(numeric) are two parameters of the algorithm , specifying the number of variants in the sliding windows and the overlap. Default is 100 for window-size and 50 for overlap
#return_what (“names”,”positions”): Either returns the “positions” or the “names” of the variants in the clusters, default is “names”
#write_output(TRUE/FALSE): Specifies whether the output should be written in a file, default=TRUE
#path_output(name of output file): The name of the output file

******************************************************************************
cluster<-function(pos,names,window_size=100,overlap=50,return_what="names", write_output=TRUE, path_output=NA){

if (!(return_what %in% c("names","positions"))){
stop('Please enter "names" OR "positions" as argument for return_what')
}

if (write_output & is.na(path_output)){
stop('Please specify a valid output name in path_output','\n')
}

cat('Using window size == ',window_size,'\n')

  require('zoo')

  b<-as.numeric(pos)
  comb<-cbind(b,names)
  comb<-comb[order(b),]
  b<-as.numeric(comb[,1])
  names<-comb[,2]
  bdiff<-diff(b)
 
  # calculate lambda under the assumption that distances follow exp distribution
 
  lambda<-log(2)/median(bdiff)
  
  br<-sort(b,decreasing=T)
  brdiff<-abs(diff(br))
    
  #observed mean values in the windows
  
  ra<-rollapply(bdiff,100,mean,by=50,align="left")

  #theoretical mean value given medians in the windows
ws<-as.numeric(window_size)
sh<-as.numeric(overlap)
  
  ra2<-rollapply(bdiff,ws,function(x) 1/(log(2)/median(x)),by=sh,align="left")
  
  #actual positions
  rap<-rollapply(b,ws+1,function(x) x,by=sh,align="left")
  
  maximas<-vector("list",length(ra))
  for (i in 1:length(ra)){
    if (ra[i]<=ra2[i]) {
      maximas[[i]]<-NA
    } else {
      ord<-order(diff(rap[i,]),decreasing=T)
      j<-1
      excl<-mean(diff(rap[i,])[-c(ord[1])])
      while (ra2[i]<excl){
        j<-j+1
        excl<-mean(diff(rap[i,])[-c(ord[1:j])])
      }
      j<-j-1
      maximas[[i]]<-rap[i,][c(ord[1:j])+1]
    }
  }
  maxima<-unlist(maximas)
  maxima<-maxima[!is.na(maxima)]
  maximaf<-sort(unique(maxima))
  
  	
  if (!is.na(path_output)) file.create(path_output)
  if (return_what=="positions") {
    lo_final<-split(b,findInterval(b,maximaf))
    ll<-as.numeric(lapply(lo_final,length))
if (return_what=="positions" & write_output==TRUE) lapply(lo_final, write, path_output, append=T, ncolumns=max(ll) )
} else {
    lo_final<-split(names,findInterval(b,maximaf))
    ll<-as.numeric(lapply(lo_final,length))
   if (return_what=="names" & write_output==TRUE)  lapply(lo_final, write, path_output, append=T, ncolumns=max(ll) )
  }
  
return(lo_final)

}

******************************************************************************
